---

- name: Stop K3s service if exists
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: stopped
    enabled: false
  failed_when: false

- name: Copy K3s service file
  ansible.builtin.template:
    src: k3s.service.j2
    dest: /etc/systemd/system/k3s.service
    owner: root
    group: root
    mode: '0644'

- name: Create K3s config directory
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
    mode: '0600'

- name: Set cluster_init to true on the first server
  ansible.builtin.set_fact:
    cluster_init: "{{ inventory_hostname == groups['server'][0] }}"

- name: Copy K3s config
  ansible.builtin.template:
    src: config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: '0600'

- name: Enable and start K3s service on the first server
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: started
    enabled: true
  when: cluster_init

- name: Wait for the first server to initialize
  when: not cluster_init
  ansible.builtin.wait_for:
    host: "{{ hostvars[groups['server'][0]]['ansible_host'] | default(groups['server'][0]) }}"
    port: "{{ k3s_api_port }}"
    timeout: 300

- name: Enable and start K3s service on other servers
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: started
    enabled: true
  when: not cluster_init

- name: Verify that all other master nodes joined the cluster
  when: not ansible_check_mode and cluster_init
  ansible.builtin.command:
    cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
  register: nodes
  until: nodes.rc == 0 and (nodes.stdout.split() | length) == ((groups['server'] | length) - 1)
  retries: 20
  delay: 10
  changed_when: false
